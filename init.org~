-*- mode: org; fill-column: 78; -*-
#+TITLE: Emacs configuration file
#+AUTHOR: Tom
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle init.el

This file defines my Emacs config in org mode. Check out [[https://tammymakesthings.com/posts/2020-04-28-literate-emacs-configuration-in-org-mode/][this link]] for where I copied the method from.

The header.

#+begin_src emacs-lisp :tangle yes
   ;;; -*- mode: emacs-lisp; lexical-binding: t -*-
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; Emacs Configuration - Copied from Tammy Cravit - tammymakesthings@gmail.com
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; THIS FILE IS AUTO-GENERATED FROM init.org AND IS REGENERATED EVERY TIME
   ;;;; THAT FILE IS SAVED. DO NOT MAKE ANY MODIFICATIONS TO THIS FILE, OR THEY
   ;;;; WILL BE LOST WHEN THE SOURCE ORG FILE IS CHANGED!
   ;;;;
   ;;;; The latest version of the source org file can be found at:
   ;;;;
   ;;;;     https://github.com/tammymakesthings/emacs_d
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 #+end_src

This snippet allows emacs to run this org file on emacs initialisation.

#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Automatically tangle init.org on save to produce init.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defvar user/init-org-file (concat user-emacs-directory "init.org"))
  (defvar user/init-el-file  (concat user-emacs-directory "init.el"))

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name user/init-org-file ))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file user/init-el-file))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

Show the full path in the title bar.

#+begin_src emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+end_src

This snippet disables various menus and displays.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(menu-bar-mode -1)          ; Disable the menu bar

(set-fringe-mode 10)        ; Give some breathing room
(set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
#+end_src

Make ESC quit prompts.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

Initialise package management repos and tools.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src 

[[https://seagle0128.github.io/doom-modeline/][Doom modeline]] is quite nice.

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src 

[[https://github.com/abo-abo/swiper][Ivy is]] used for completion.

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

Org mode configuration. Using this [[https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][blog post]] for inspiration.

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Binding C-c o to open up the main org file from emacs.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "~/organiser.org")))
#+end_src

Binding C-c c to org capture - for saving notes. Also defining the location of the default place to save notes.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-default-notes-file "~/organiser.org")
#+end_src


Defining org-babel behaviour - enabling literate programming.

#+begin_src emacs-lisp
;; Run/highlight code using babel in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (lisp . t)
   (shell . t)
   ;; Include other languages here...
   ))
;; Syntax highlight in #+BEGIN_SRC blocks
(setq org-src-fontify-natively t)
;; Don't prompt before running code in org
(setq org-confirm-babel-evaluate nil)
#+end_src

Some more nice packages for use.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package doom-themes
  :init (load-theme 'doom-palenight t))

(use-package all-the-icons)

(global-visual-line-mode t) ; wrap word at the end of line
#+end_src

Slime and Lisp development configuration.

#+begin_src emacs-lisp
(use-package slime)

;; Replace "sbcl" with the path to your implementation
(setq inferior-lisp-program "/usr/bin/sbcl")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (slime use-package solarized-theme rainbow-delimiters org-bullets ivy doom-themes doom-modeline))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src

Configuring [[https://github.com/joaotavora/yasnippet][yasnippet]].

#+begin_src emacs-lisp
(use-package yasnippet)

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))

(yas-global-mode 1)

(define-key yas-minor-mode-map [(tab)] nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
#+end_src



